"""
Test script cho thu·∫≠t to√°n decision logic.
Ch·∫°y: python tests/test_decision_logic.py
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from app.models.schemas import TaskState, NetworkState, NetworkConfig
from app.core.decision_logic import (
    TASK_WEIGHTS,
    QOS_REQUIREMENTS,
    calculate_cost,
    calculate_energy_cost, 
    calculate_qos_penalty,
    select_best_network
)


def test_task_weights():
    """Test c·∫•u h√¨nh tr·ªçng s·ªë"""
    print("=== Test Task Weights ===")
    
    # Ki·ªÉm tra t·∫•t c·∫£ tasks ƒë·ªÅu c√≥ weights
    for task in TaskState:
        assert task in TASK_WEIGHTS, f"Missing weights for {task}"
        weights = TASK_WEIGHTS[task]
        
        # Ki·ªÉm tra t·ªïng tr·ªçng s·ªë = 1.0
        total = weights["w_energy"] + weights["w_qos"]
        assert abs(total - 1.0) < 0.001, f"Weights sum != 1.0 for {task}: {total}"
        
        print(f"‚úì {task}: w_energy={weights['w_energy']}, w_qos={weights['w_qos']}")
    
    print("‚úì Task weights ƒë·ªÅu h·ª£p l·ªá")


def test_qos_requirements():
    """Test y√™u c·∫ßu QoS"""
    print("\n=== Test QoS Requirements ===")
    
    for task in TaskState:
        assert task in QOS_REQUIREMENTS, f"Missing QoS requirements for {task}"
        req = QOS_REQUIREMENTS[task]
        
        assert "min_bandwidth" in req
        assert "max_latency" in req
        assert "must_be_available" in req
        
        print(f"‚úì {task}: BW>={req['min_bandwidth']}Mbps, Latency<={req['max_latency']}ms")
    
    print("‚úì QoS requirements ƒë·ªÅu c√≥ ƒë·∫ßy ƒë·ªß")


def test_energy_cost_calculation():
    """Test t√≠nh to√°n chi ph√≠ nƒÉng l∆∞·ª£ng"""
    print("\n=== Test Energy Cost Calculation ===")
    
    # T·∫°o network config m·∫´u
    wifi_config = NetworkConfig(
        name="Wi-Fi",
        energy_tx=0.5,      # 0.5 mJ/KB
        energy_idle=10.0,   # 10 mW  
        energy_wakeup=2.0   # 2 mJ
    )
    
    # T·∫°o network state m·∫´u
    wifi_state = NetworkState(
        name="Wi-Fi",
        bandwidth=50.0,
        latency=15,
        is_available=True
    )
    
    # Test v·ªõi c√°c tasks kh√°c nhau
    for task in TaskState:
        energy_cost = calculate_energy_cost(wifi_config, wifi_state, task)
        print(f"‚úì {task}: Energy cost = {energy_cost:.2f} mJ")
        assert energy_cost > 0, f"Energy cost should be positive for {task}"
    
    print("‚úì Energy cost calculation ho·∫°t ƒë·ªông ƒë√∫ng")


def test_qos_penalty():
    """Test t√≠nh to√°n QoS penalty"""
    print("\n=== Test QoS Penalty Calculation ===")
    
    # Test case 1: M·∫°ng t·ªët - kh√¥ng c√≥ penalty
    good_network = NetworkState(
        name="5G",
        bandwidth=100.0,    # R·∫•t cao
        latency=10,         # R·∫•t th·∫•p
        is_available=True
    )
    
    for task in TaskState:
        penalty = calculate_qos_penalty(good_network, task)
        print(f"‚úì {task} v·ªõi m·∫°ng t·ªët: penalty = {penalty}")
        # M·∫°ng t·ªët n√™n c√≥ penalty th·∫•p
    
    # Test case 2: M·∫°ng k√©m - c√≥ penalty cao
    bad_network = NetworkState(
        name="BLE",
        bandwidth=0.5,      # R·∫•t th·∫•p
        latency=500,        # R·∫•t cao
        is_available=True
    )
    
    for task in TaskState:
        penalty = calculate_qos_penalty(bad_network, task)
        print(f"‚úì {task} v·ªõi m·∫°ng k√©m: penalty = {penalty}")
    
    # Test case 3: M·∫°ng kh√¥ng kh·∫£ d·ª•ng
    unavailable_network = NetworkState(
        name="Offline",
        bandwidth=100.0,
        latency=10,
        is_available=False
    )
    
    penalty = calculate_qos_penalty(unavailable_network, TaskState.IDLE_MONITORING)
    print(f"‚úì M·∫°ng offline: penalty = {penalty}")
    assert penalty >= 1000, "Unavailable network should have high penalty"
    
    print("‚úì QoS penalty calculation ho·∫°t ƒë·ªông ƒë√∫ng")


def test_cost_calculation():
    """Test t√≠nh to√°n t·ªïng chi ph√≠"""
    print("\n=== Test Total Cost Calculation ===")
    
    # Setup networks
    wifi_config = NetworkConfig(
        name="Wi-Fi", energy_tx=0.5, energy_idle=10.0, energy_wakeup=2.0
    )
    g5_config = NetworkConfig(
        name="5G", energy_tx=1.2, energy_idle=15.0, energy_wakeup=5.0
    )
    
    wifi_state = NetworkState(
        name="Wi-Fi", bandwidth=50.0, latency=15, is_available=True
    )
    g5_state = NetworkState(
        name="5G", bandwidth=100.0, latency=25, is_available=True
    )
    
    # Test v·ªõi c√°c tasks kh√°c nhau
    for task in TaskState:
        wifi_cost = calculate_cost(wifi_state, wifi_config, task)
        g5_cost = calculate_cost(g5_state, g5_config, task)
        
        print(f"‚úì {task}:")
        print(f"  Wi-Fi cost: {wifi_cost:.2f}")
        print(f"  5G cost: {g5_cost:.2f}")
        
        assert wifi_cost > 0 and g5_cost > 0, f"Costs should be positive for {task}"
    
    print("‚úì Total cost calculation ho·∫°t ƒë·ªông ƒë√∫ng")


def test_network_selection():
    """Test thu·∫≠t to√°n l·ª±a ch·ªçn m·∫°ng"""
    print("\n=== Test Network Selection ===")
    
    # Setup configs
    network_configs = {
        "Wi-Fi": NetworkConfig(name="Wi-Fi", energy_tx=0.5, energy_idle=10.0, energy_wakeup=2.0),
        "5G": NetworkConfig(name="5G", energy_tx=1.2, energy_idle=15.0, energy_wakeup=5.0),
        "BLE": NetworkConfig(name="BLE", energy_tx=0.1, energy_idle=2.0, energy_wakeup=0.5)
    }
    
    # Setup available networks
    available_networks = [
        NetworkState(name="Wi-Fi", bandwidth=50.0, latency=15, is_available=True),
        NetworkState(name="5G", bandwidth=100.0, latency=25, is_available=True), 
        NetworkState(name="BLE", bandwidth=1.0, latency=200, is_available=True)
    ]
    
    # Test selection cho t·ª´ng task
    for task in TaskState:
        try:
            best_network, min_cost = select_best_network(
                available_networks, network_configs, task
            )
            print(f"‚úì {task}: Ch·ªçn {best_network.name} (cost: {min_cost:.2f})")
        except Exception as e:
            print(f"‚úó Error with {task}: {e}")
            raise
    
    print("‚úì Network selection ho·∫°t ƒë·ªông ƒë√∫ng")


def test_realistic_scenarios():
    """Test v·ªõi c√°c k·ªãch b·∫£n th·ª±c t·∫ø"""
    print("\n=== Test Realistic Scenarios ===")
    
    # Scenario 1: IDLE - n√™n ch·ªçn m·∫°ng ti·∫øt ki·ªám nƒÉng l∆∞·ª£ng (BLE)
    configs = {
        "Wi-Fi": NetworkConfig(name="Wi-Fi", energy_tx=0.5, energy_idle=10.0, energy_wakeup=2.0),
        "BLE": NetworkConfig(name="BLE", energy_tx=0.1, energy_idle=2.0, energy_wakeup=0.5)
    }
    
    networks = [
        NetworkState(name="Wi-Fi", bandwidth=50.0, latency=15, is_available=True),
        NetworkState(name="BLE", bandwidth=1.0, latency=100, is_available=True)
    ]
    
    best, cost = select_best_network(networks, configs, TaskState.IDLE_MONITORING)
    print(f"‚úì IDLE scenario: Ch·ªçn {best.name} (energy-efficient)")
    
    # Scenario 2: DATA_BURST - n√™n ch·ªçn m·∫°ng c√≥ QoS t·ªët
    fast_networks = [
        NetworkState(name="Wi-Fi", bandwidth=50.0, latency=15, is_available=True),
        NetworkState(name="BLE", bandwidth=0.5, latency=300, is_available=True)  # QoS k√©m
    ]
    
    best, cost = select_best_network(fast_networks, configs, TaskState.DATA_BURST_ALERT)
    print(f"‚úì DATA_BURST scenario: Ch·ªçn {best.name} (better QoS)")
    
    print("‚úì Realistic scenarios pass")


if __name__ == "__main__":
    print("Ki·ªÉm tra thu·∫≠t to√°n Decision Logic...")
    print("=" * 50)
    
    test_task_weights()
    test_qos_requirements()
    test_energy_cost_calculation()
    test_qos_penalty() 
    test_cost_calculation()
    test_network_selection()
    test_realistic_scenarios()
    
    print("\n" + "=" * 50)
    print("üéâ T·∫•t c·∫£ tests PASS!")
    print("\nüìä Thu·∫≠t to√°n Decision Logic ƒë√£ s·∫µn s√†ng ƒë·ªÉ:")
    print("- T√≠ch h·ª£p v√†o FastAPI endpoints")
    print("- Hu·∫•n luy·ªán m√¥ h√¨nh Random Forest")
    print("- M√¥ ph·ªèng h·ªá th·ªëng IoT network selection")