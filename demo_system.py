"""
Demo script cho h·ªá th·ªëng IoT Network Selection v·ªõi Decision Logic Algorithm.

T·∫°o c√°c k·ªãch b·∫£n m√¥ ph·ªèng th·ª±c t·∫ø ƒë·ªÉ demonstare thu·∫≠t to√°n MCDM.
Ch·∫°y: python demo_system.py
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from app.models.schemas import TaskState, NetworkState, NetworkConfig, DeviceState
from app.core.decision_logic import (
    select_best_network, calculate_cost, TASK_WEIGHTS, QOS_REQUIREMENTS
)


def print_header(title: str):
    """In header ƒë·∫πp cho m·ªói section"""
    print("\n" + "=" * 70)
    print(f"üî• {title}")
    print("=" * 70)


def demo_basic_algorithm():
    """Demo thu·∫≠t to√°n c∆° b·∫£n"""
    print_header("DEMO THU·∫¨T TO√ÅN C∆† S·ªû - MCDM")
    
    # C·∫•u h√¨nh networks
    configs = {
        "Wi-Fi": NetworkConfig(
            name="Wi-Fi", energy_tx=0.5, energy_idle=10.0, energy_wakeup=2.0
        ),
        "5G": NetworkConfig(
            name="5G", energy_tx=1.2, energy_idle=15.0, energy_wakeup=5.0
        ),
        "BLE": NetworkConfig(
            name="BLE", energy_tx=0.1, energy_idle=2.0, energy_wakeup=0.5
        )
    }
    
    print("üìä C·∫•u h√¨nh m·∫°ng:")
    for name, config in configs.items():
        print(f"  {name}: TX={config.energy_tx} mJ/KB, Idle={config.energy_idle} mW")
    
    print("\nüéØ Tr·ªçng s·ªë cho c√°c tasks:")
    for task, weights in TASK_WEIGHTS.items():
        print(f"  {task.value}: Energy={weights['w_energy']}, QoS={weights['w_qos']}")
    
    print("\nüìã Y√™u c·∫ßu QoS t·ªëi thi·ªÉu:")
    for task, req in QOS_REQUIREMENTS.items():
        print(f"  {task.value}: BW>={req['min_bandwidth']} Mbps, Latency<={req['max_latency']} ms")


def demo_scenario_1_office_environment():
    """K·ªãch b·∫£n 1: M√¥i tr∆∞·ªùng vƒÉn ph√≤ng v·ªõi nhi·ªÅu m·∫°ng"""
    print_header("K·ªäCH B·∫¢N 1: M√îI TR∆Ø·ªúNG VƒÇN PH√íNG")
    
    # Setup
    configs = {
        "Wi-Fi": NetworkConfig(name="Wi-Fi", energy_tx=0.5, energy_idle=10.0, energy_wakeup=2.0),
        "5G": NetworkConfig(name="5G", energy_tx=1.2, energy_idle=15.0, energy_wakeup=5.0),
        "Ethernet": NetworkConfig(name="Ethernet", energy_tx=0.3, energy_idle=5.0, energy_wakeup=0.0)
    }
    
    office_networks = [
        NetworkState(name="Wi-Fi", bandwidth=100.0, latency=10, is_available=True),
        NetworkState(name="5G", bandwidth=200.0, latency=15, is_available=True), 
        NetworkState(name="Ethernet", bandwidth=1000.0, latency=5, is_available=True)
    ]
    
    print("üè¢ Thi·∫øt b·ªã IoT trong vƒÉn ph√≤ng - 3 m·∫°ng kh·∫£ d·ª•ng:")
    for net in office_networks:
        print(f"  üì∂ {net.name}: {net.bandwidth} Mbps, {net.latency}ms")
    
    print("\nüß™ Test c√°c tasks kh√°c nhau:")
    
    for task in TaskState:
        print(f"\nüìã Task: {task.value}")
        
        try:
            best_net, cost = select_best_network(office_networks, configs, task)
            print(f"  ‚úÖ Ch·ªçn: {best_net.name} (chi ph√≠: {cost:.2f})")
            
            # Hi·ªÉn th·ªã chi ph√≠ c·ªßa t·∫•t c·∫£ networks
            all_costs = []
            for net in office_networks:
                if net.name in configs:
                    net_cost = calculate_cost(net, configs[net.name], task)
                    all_costs.append((net.name, net_cost))
            
            all_costs.sort(key=lambda x: x[1])  # Sort by cost
            print("  üìä So s√°nh chi ph√≠:")
            for name, cost in all_costs:
                status = "üëë" if name == best_net.name else "  "
                print(f"    {status} {name}: {cost:.2f}")
                
        except Exception as e:
            print(f"  ‚ùå L·ªói: {e}")


def demo_scenario_2_mobile_environment():
    """K·ªãch b·∫£n 2: Thi·∫øt b·ªã di ƒë·ªông v·ªõi m·∫°ng kh√¥ng ·ªïn ƒë·ªãnh"""
    print_header("K·ªäCH B·∫¢N 2: THI·∫æT B·ªä DI ƒê·ªòNG - M·∫†NG KH√îNG ·ªîN ƒê·ªäNH")
    
    configs = {
        "Wi-Fi": NetworkConfig(name="Wi-Fi", energy_tx=0.5, energy_idle=10.0, energy_wakeup=2.0),
        "4G": NetworkConfig(name="4G", energy_tx=0.8, energy_idle=12.0, energy_wakeup=3.0),
        "5G": NetworkConfig(name="5G", energy_tx=1.2, energy_idle=15.0, energy_wakeup=5.0)
    }
    
    # K·ªãch b·∫£n A: Wi-Fi y·∫øu
    print("\nüìç V·ªã tr√≠ A: G·∫ßn router Wi-Fi")
    good_wifi = [
        NetworkState(name="Wi-Fi", bandwidth=80.0, latency=8, is_available=True),
        NetworkState(name="4G", bandwidth=30.0, latency=50, is_available=True)
    ]
    
    for task in TaskState:
        best_net, cost = select_best_network(good_wifi, configs, task)
        print(f"  {task.value}: Ch·ªçn {best_net.name} (cost: {cost:.2f})")
    
    # K·ªãch b·∫£n B: Xa router, ch·ªâ c√≥ cellular  
    print("\nüìç V·ªã tr√≠ B: Xa Wi-Fi, ch·ªâ c√≥ cellular")
    cellular_only = [
        NetworkState(name="4G", bandwidth=25.0, latency=60, is_available=True),
        NetworkState(name="5G", bandwidth=150.0, latency=25, is_available=True)
    ]
    
    for task in TaskState:
        best_net, cost = select_best_network(cellular_only, configs, task)
        print(f"  {task.value}: Ch·ªçn {best_net.name} (cost: {cost:.2f})")
    
    # K·ªãch b·∫£n C: M·∫°ng qu√° t·∫£i
    print("\nüìç V·ªã tr√≠ C: T·∫•t c·∫£ m·∫°ng ƒë·ªÅu ch·∫≠m (congested)")
    congested_nets = [
        NetworkState(name="Wi-Fi", bandwidth=5.0, latency=200, is_available=True),   # Qu√° t·∫£i
        NetworkState(name="4G", bandwidth=2.0, latency=300, is_available=True),     # R·∫•t ch·∫≠m
        NetworkState(name="5G", bandwidth=10.0, latency=100, is_available=True)     # Ch·∫≠m
    ]
    
    for task in TaskState:
        try:
            best_net, cost = select_best_network(congested_nets, configs, task)
            print(f"  {task.value}: Ch·ªçn {best_net.name} (cost: {cost:.2f}) ‚ö†Ô∏è  High cost!")
        except Exception as e:
            print(f"  {task.value}: ‚ùå {e}")


def demo_scenario_3_iot_sensors():
    """K·ªãch b·∫£n 3: C·∫£m bi·∫øn IoT v·ªõi y√™u c·∫ßu ti·∫øt ki·ªám nƒÉng l∆∞·ª£ng cao"""
    print_header("K·ªäCH B·∫¢N 3: C·∫¢M BI·∫æN IOT - TI·∫æT KI·ªÜM NƒÇNG L∆Ø·ª¢NG")
    
    configs = {
        "Wi-Fi": NetworkConfig(name="Wi-Fi", energy_tx=0.5, energy_idle=10.0, energy_wakeup=2.0),
        "BLE": NetworkConfig(name="BLE", energy_tx=0.05, energy_idle=1.0, energy_wakeup=0.1),     # R·∫•t ti·∫øt ki·ªám
        "LoRa": NetworkConfig(name="LoRa", energy_tx=0.02, energy_idle=0.5, energy_wakeup=0.05)   # C·ª±c ti·∫øt ki·ªám
    }
    
    sensor_networks = [
        NetworkState(name="Wi-Fi", bandwidth=50.0, latency=15, is_available=True),
        NetworkState(name="BLE", bandwidth=1.0, latency=50, is_available=True),
        NetworkState(name="LoRa", bandwidth=0.05, latency=1000, is_available=True)  # R·∫•t ch·∫≠m nh∆∞ng ti·∫øt ki·ªám
    ]
    
    print("üîã M·∫°ng cho c·∫£m bi·∫øn IoT (pin s·∫°c kh√≥):")
    for net in sensor_networks:
        config = configs[net.name]
        print(f"  üì° {net.name}: BW={net.bandwidth} Mbps, Energy_TX={config.energy_tx} mJ/KB")
    
    print("\nüß™ L·ª±a ch·ªçn m·∫°ng cho t·ª´ng task:")
    
    for task in TaskState:
        best_net, cost = select_best_network(sensor_networks, configs, task)
        config = configs[best_net.name]
        
        print(f"\nüìã {task.value}:")
        print(f"  ‚úÖ Ch·ªçn: {best_net.name}")
        print(f"  üí∞ Chi ph√≠: {cost:.2f}")
        print(f"  ‚ö° Energy TX: {config.energy_tx} mJ/KB")
        print(f"  üì∂ Bandwidth: {best_net.bandwidth} Mbps")
        
        # Ki·ªÉm tra xem c√≥ ph·∫£i l·ª±a ch·ªçn h·ª£p l√Ω kh√¥ng
        if task == TaskState.IDLE_MONITORING and best_net.name in ["BLE", "LoRa"]:
            print("  ‚úÖ H·ª£p l√Ω: Ch·ªçn m·∫°ng ti·∫øt ki·ªám cho IDLE")
        elif task == TaskState.DATA_BURST_ALERT and best_net.bandwidth >= 5.0:
            print("  ‚úÖ H·ª£p l√Ω: ƒê·ªß bandwidth cho DATA_BURST") 
        elif task == TaskState.VIDEO_STREAMING and best_net.bandwidth < 10.0:
            print("  ‚ö†Ô∏è  C·∫£nh b√°o: Bandwidth c√≥ th·ªÉ kh√¥ng ƒë·ªß cho VIDEO")


def demo_real_world_device_simulation():
    """M√¥ ph·ªèng thi·∫øt b·ªã th·ª±c t·∫ø di chuy·ªÉn qua nhi·ªÅu v√πng m·∫°ng"""
    print_header("M√î PH·ªéNG THI·∫æT B·ªä TH·ª∞C T·∫æ - DI CHUY·ªÇN")
    
    configs = {
        "Wi-Fi": NetworkConfig(name="Wi-Fi", energy_tx=0.5, energy_idle=10.0, energy_wakeup=2.0),
        "5G": NetworkConfig(name="5G", energy_tx=1.2, energy_idle=15.0, energy_wakeup=5.0),
        "BLE": NetworkConfig(name="BLE", energy_tx=0.1, energy_idle=2.0, energy_wakeup=0.5)
    }
    
    # Gi·∫£ l·∫≠p thi·∫øt b·ªã di chuy·ªÉn qua 5 v·ªã tr√≠ kh√°c nhau
    locations = [
        {
            "name": "üè† T·∫°i nh√†", 
            "position": (0, 0),
            "networks": [
                NetworkState(name="Wi-Fi", bandwidth=100.0, latency=5, is_available=True),
                NetworkState(name="5G", bandwidth=80.0, latency=20, is_available=True)
            ]
        },
        {
            "name": "üöó Tr√™n xe", 
            "position": (50, 25),
            "networks": [
                NetworkState(name="5G", bandwidth=150.0, latency=15, is_available=True)
            ]
        },
        {
            "name": "üè¢ VƒÉn ph√≤ng",
            "position": (100, 50), 
            "networks": [
                NetworkState(name="Wi-Fi", bandwidth=200.0, latency=8, is_available=True),
                NetworkState(name="BLE", bandwidth=1.0, latency=30, is_available=True)
            ]
        },
        {
            "name": "‚òï Qu√°n caf√©",
            "position": (75, 100),
            "networks": [
                NetworkState(name="Wi-Fi", bandwidth=20.0, latency=50, is_available=True),  # WiFi c√¥ng c·ªông ch·∫≠m
                NetworkState(name="5G", bandwidth=100.0, latency=25, is_available=True)
            ]
        },
        {
            "name": "üå≥ C√¥ng vi√™n",
            "position": (25, 150), 
            "networks": [
                NetworkState(name="5G", bandwidth=60.0, latency=40, is_available=True),    # S√≥ng y·∫øu
                NetworkState(name="BLE", bandwidth=0.5, latency=100, is_available=True)
            ]
        }
    ]
    
    # Tasks m√† thi·∫øt b·ªã c·∫ßn th·ª±c hi·ªán ·ªü m·ªói v·ªã tr√≠
    location_tasks = [
        TaskState.IDLE_MONITORING,    # T·∫°i nh√†
        TaskState.DATA_BURST_ALERT,   # Tr√™n xe  
        TaskState.VIDEO_STREAMING,    # VƒÉn ph√≤ng
        TaskState.DATA_BURST_ALERT,   # Qu√°n caf√©
        TaskState.IDLE_MONITORING     # C√¥ng vi√™n
    ]
    
    print("üó∫Ô∏è  Thi·∫øt b·ªã IoT di chuy·ªÉn qua 5 v·ªã tr√≠:")
    
    total_cost = 0.0
    
    for i, (location, task) in enumerate(zip(locations, location_tasks)):
        print(f"\nüìç V·ªã tr√≠ {i+1}: {location['name']} {location['position']}")
        print(f"üìã Task: {task.value}")
        print(f"üì∂ Networks kh·∫£ d·ª•ng: {[n.name for n in location['networks']]}")
        
        try:
            device_state = DeviceState(
                position=location['position'],
                current_task=task,
                available_networks=location['networks']
            )
            
            best_net, cost = select_best_network(
                device_state.available_networks, configs, device_state.current_task
            )
            
            total_cost += cost
            
            print(f"  ‚úÖ Quy·∫øt ƒë·ªãnh: Ch·ªçn {best_net.name}")
            print(f"  üí∞ Chi ph√≠: {cost:.2f}")
            print(f"  üìä T√≠ch l≈©y: {total_cost:.2f}")
            
        except Exception as e:
            print(f"  ‚ùå L·ªói: {e}")
    
    print(f"\nüéØ T·ªîNG K·∫æT:")
    print(f"üí∞ T·ªïng chi ph√≠: {total_cost:.2f}")
    print(f"üìç S·ªë v·ªã tr√≠: {len(locations)}")
    print(f"‚ö° Chi ph√≠ trung b√¨nh/v·ªã tr√≠: {total_cost/len(locations):.2f}")


def main():
    """Ch·∫°y to√†n b·ªô demo"""
    print("üöÄ DEMO H·ªÜ TH·ªêNG IOT NETWORK SELECTION")
    print("Thu·∫≠t to√°n: Multi-Criteria Decision Making (MCDM)")
    print("C√¥ng th·ª©c: Cost = w_energy * Energy_Cost + w_qos * QoS_Penalty")
    
    demo_basic_algorithm()
    demo_scenario_1_office_environment() 
    demo_scenario_2_mobile_environment()
    demo_scenario_3_iot_sensors()
    demo_real_world_device_simulation()
    
    print_header("K·∫æT LU·∫¨N")
    print("üéâ Demo ho√†n t·∫•t!")
    print("\n‚úÖ Thu·∫≠t to√°n MCDM ho·∫°t ƒë·ªông hi·ªáu qu·∫£:")
    print("  - T·ª± ƒë·ªông ch·ªçn m·∫°ng ti·∫øt ki·ªám nƒÉng l∆∞·ª£ng cho IDLE")
    print("  - ∆Øu ti√™n QoS cho DATA_BURST v√† VIDEO_STREAMING")
    print("  - X·ª≠ l√Ω ƒë∆∞·ª£c nhi·ªÅu k·ªãch b·∫£n th·ª±c t·∫ø")
    print("  - C√≥ th·ªÉ m·ªü r·ªông v·ªõi th√™m lo·∫°i m·∫°ng v√† tasks")
    
    print("\nüìà B∆∞·ªõc ti·∫øp theo:")
    print("  1. Thu th·∫≠p d·ªØ li·ªáu t·ª´ thu·∫≠t to√°n n√†y")
    print("  2. Hu·∫•n luy·ªán m√¥ h√¨nh Random Forest")
    print("  3. So s√°nh hi·ªáu su·∫•t ML vs Rule-based")
    print("  4. T√≠ch h·ª£p v√†o h·ªá th·ªëng IoT th·ª±c t·∫ø")


if __name__ == "__main__":
    main()