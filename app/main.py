"""
Main FastAPI application cho h·ªá th·ªëng IoT Network Selection.

File n√†y ch·ª©a c√°c endpoint ch√≠nh ƒë·ªÉ:
- Ch·∫°y simulation steps
- Th·ª±c hi·ªán network decision making
- T√≠ch h·ª£p gi·ªØa simulation engine v√† decision logic
"""

from fastapi import FastAPI, HTTPException
from fastapi.middleware.cors import CORSMiddleware
from fastapi.staticfiles import StaticFiles
from fastapi.responses import FileResponse
from typing import Dict, List, Optional
import os
from app.models.schemas import DeviceState, NetworkState, TaskState
from app.core.decision_logic import calculate_cost, select_best_network
from app.services.simulation import SimulationEngine

# Kh·ªüi t·∫°o FastAPI app
app = FastAPI(
    title="IoT Network Selection System",
    version="1.0.0", 
    description="API for IoT device network selection using MCDM algorithm and simulation"
)

# Add CORS middleware for web UI
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],  # In production, specify exact origins
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Mount static files for web UI
web_dir = os.path.join(os.path.dirname(os.path.dirname(__file__)), "web")
if os.path.exists(web_dir):
    app.mount("/static", StaticFiles(directory=web_dir), name="static")

# Kh·ªüi t·∫°o instance c·ªßa SimulationEngine
simulation_engine = SimulationEngine()

print("üöÄ IoT Network Selection API initialized")
print(f"üì° Simulation engine ready with {len(simulation_engine.network_configs)} network types")


@app.get("/")
def root():
    """Root endpoint v·ªõi th√¥ng tin h·ªá th·ªëng"""
    return {
        "message": "IoT Network Selection System API",
        "version": "1.0.0",
        "endpoints": {
            "simulation": "/simulation/step - Run simulation step",
            "decision": "/decision - Make network selection decision", 
            "status": "/status - Get system status",
            "web_ui": "/ui - Access web-based map visualization"
        }
    }


@app.get("/ui")
def web_ui():
    """Serve the web UI for map visualization"""
    web_file = os.path.join(os.path.dirname(os.path.dirname(__file__)), "web", "index.html")
    if os.path.exists(web_file):
        return FileResponse(web_file)
    else:
        raise HTTPException(status_code=404, detail="Web UI not found")


@app.get("/map")
def map_data():
    """Get map data for visualization including base stations and current device state"""
    stats = simulation_engine.get_simulation_stats()
    
    # Get base stations data from simulation engine
    base_stations = []
    
    # Wi-Fi stations
    for i in range(4):
        base_stations.append({
            "id": f"wifi_{i}",
            "type": "Wi-Fi",
            "position": simulation_engine.base_stations["Wi-Fi"][i],
            "color": "#2196F3"
        })
    
    # 5G stations  
    for i in range(4):
        base_stations.append({
            "id": f"5g_{i}",
            "type": "5G", 
            "position": simulation_engine.base_stations["5G"][i],
            "color": "#9C27B0"
        })
        
    # BLE stations
    for i in range(4):
        base_stations.append({
            "id": f"ble_{i}",
            "type": "BLE",
            "position": simulation_engine.base_stations["BLE"][i], 
            "color": "#FF9800"
        })
    
    return {
        "map_size": stats["map_size"],
        "base_stations": base_stations,
        "device_state": {
            "position": stats["current_position"],
            "current_task": stats["current_task"],
            "available_networks": stats["available_networks"]
        },
        "simulation_step": stats["simulation_step"]
    }
    """Root endpoint v·ªõi th√¥ng tin h·ªá th·ªëng"""
    return {
        "message": "IoT Network Selection System API",
        "version": "1.0.0",
        "endpoints": {
            "simulation": "/simulation/step - Run simulation step",
            "decision": "/decision - Make network selection decision", 
            "status": "/status - Get system status"
        }
    }


@app.get("/status")
def get_system_status():
    """L·∫•y tr·∫°ng th√°i t·ªïng qu√°t c·ªßa h·ªá th·ªëng"""
    simulation_stats = simulation_engine.get_simulation_stats()
    
    return {
        "system_status": "operational",
        "simulation_engine": {
            "current_step": simulation_stats["simulation_step"],
            "device_position": simulation_stats["current_position"],
            "current_task": simulation_stats["current_task"],
            "available_networks": simulation_stats["available_networks"],
            "map_size": simulation_stats["map_size"],
            "total_base_stations": simulation_stats["total_base_stations"]
        },
        "network_configs": {
            name: {
                "energy_tx": config.energy_tx,
                "energy_idle": config.energy_idle,
                "energy_wakeup": config.energy_wakeup
            }
            for name, config in simulation_engine.network_configs.items()
        }
    }


@app.post("/simulation/step")
def simulation_step() -> Dict:
    """
    Endpoint ƒë·ªÉ ch·∫°y m·ªôt b∆∞·ªõc m√¥ ph·ªèng.
    
    G·ªçi ph∆∞∆°ng th·ª©c run_simulation_step() c·ªßa SimulationEngine 
    v√† tr·∫£ v·ªÅ DeviceState m·ªõi c√πng v·ªõi th·ªëng k√™.
    
    Returns:
        Dict ch·ª©a DeviceState m·ªõi v√† th√¥ng tin b∆∞·ªõc m√¥ ph·ªèng
    """
    try:
        # Ch·∫°y m·ªôt b∆∞·ªõc m√¥ ph·ªèng
        new_device_state = simulation_engine.run_simulation_step()
        
        # Chu·∫©n b·ªã response data
        response_data = {
            "step_number": simulation_engine.simulation_step,
            "device_state": {
                "position": new_device_state.position,
                "current_task": new_device_state.current_task.value,
                "available_networks": [
                    {
                        "name": network.name,
                        "bandwidth": network.bandwidth,
                        "latency": network.latency,
                        "is_available": network.is_available
                    }
                    for network in new_device_state.available_networks
                ]
            },
            "simulation_info": {
                "networks_count": len(new_device_state.available_networks),
                "networks_list": [net.name for net in new_device_state.available_networks]
            }
        }
        
        return response_data
        
    except Exception as e:
        raise HTTPException(
            status_code=500, 
            detail=f"Simulation step failed: {str(e)}"
        )


@app.post("/decision")
def make_decision(device_state: DeviceState) -> Dict:
    """
    Endpoint ƒë·ªÉ th·ª±c hi·ªán quy·∫øt ƒë·ªãnh l·ª±a ch·ªçn m·∫°ng.
    
    Nh·∫≠n v√†o m·ªôt DeviceState, t√≠nh chi ph√≠ cho t·∫•t c·∫£ m·∫°ng kh·∫£ d·ª•ng
    v√† tr·∫£ v·ªÅ m·∫°ng c√≥ chi ph√≠ th·∫•p nh·∫•t.
    
    Args:
        device_state: Tr·∫°ng th√°i thi·∫øt b·ªã v·ªõi danh s√°ch m·∫°ng kh·∫£ d·ª•ng
        
    Returns:
        Dict ch·ª©a t√™n m·∫°ng t·ªëi ∆∞u v√† th√¥ng tin chi ti·∫øt
    """
    try:
        # Ki·ªÉm tra c√≥ m·∫°ng kh·∫£ d·ª•ng kh√¥ng
        if not device_state.available_networks:
            raise HTTPException(
                status_code=400,
                detail="No available networks in device state"
            )
        
        # Dictionary ƒë·ªÉ l∆∞u chi ph√≠ c·ªßa t·ª´ng m·∫°ng
        network_costs = {}
        cost_details = {}
        
        # L·∫∑p qua danh s√°ch available_networks
        for network in device_state.available_networks:
            network_name = network.name
            
            # Ki·ªÉm tra network config c√≥ t·ªìn t·∫°i kh√¥ng
            if network_name not in simulation_engine.network_configs:
                print(f"‚ö†Ô∏è  Warning: No config found for network {network_name}, skipping...")
                continue
            
            # L·∫•y network config
            network_config = simulation_engine.network_configs[network_name]
            
            # T√≠nh chi ph√≠ cho m·∫°ng n√†y
            cost = calculate_cost(
                network_state=network,
                network_config=network_config,
                task=device_state.current_task
            )
            
            network_costs[network_name] = cost
            
            # L∆∞u chi ti·∫øt cho debugging
            cost_details[network_name] = {
                "total_cost": round(cost, 2),
                "network_info": {
                    "bandwidth": network.bandwidth,
                    "latency": network.latency,
                    "is_available": network.is_available
                },
                "config_info": {
                    "energy_tx": network_config.energy_tx,
                    "energy_idle": network_config.energy_idle,
                    "energy_wakeup": network_config.energy_wakeup
                }
            }
        
        # Ki·ªÉm tra c√≥ m·∫°ng n√†o ƒë∆∞·ª£c t√≠nh to√°n kh√¥ng
        if not network_costs:
            raise HTTPException(
                status_code=400,
                detail="No valid networks found for cost calculation"
            )
        
        # T√¨m m·∫°ng c√≥ chi ph√≠ th·∫•p nh·∫•t
        optimal_network = min(network_costs, key=network_costs.get)
        optimal_cost = network_costs[optimal_network]
        
        # Chu·∫©n b·ªã response
        response_data = {
            "optimal_network": optimal_network,
            "optimal_cost": round(optimal_cost, 2),
            "device_info": {
                "position": device_state.position,
                "current_task": device_state.current_task.value
            },
            "all_network_costs": {
                name: round(cost, 2) 
                for name, cost in network_costs.items()
            },
            "cost_analysis": cost_details,
            "decision_summary": {
                "total_networks_evaluated": len(network_costs),
                "cost_difference": round(
                    max(network_costs.values()) - min(network_costs.values()), 2
                ) if len(network_costs) > 1 else 0,
                "algorithm": "MCDM_Energy_QoS"
            }
        }
        
        return response_data
        
    except HTTPException:
        # Re-raise HTTP exceptions
        raise
    except Exception as e:
        raise HTTPException(
            status_code=500,
            detail=f"Decision making failed: {str(e)}"
        )


@app.post("/simulation/step-with-decision")
def simulation_step_with_decision() -> Dict:
    """
    Endpoint t√≠ch h·ª£p: ch·∫°y simulation step + decision making trong m·ªôt call.
    
    Ti·ªán l·ª£i cho vi·ªác demo v√† testing.
    
    Returns:
        Dict ch·ª©a k·∫øt qu·∫£ simulation v√† decision
    """
    try:
        # Ch·∫°y simulation step
        new_device_state = simulation_engine.run_simulation_step()
        
        # Th·ª±c hi·ªán decision n·∫øu c√≥ m·∫°ng kh·∫£ d·ª•ng
        decision_result = None
        if new_device_state.available_networks:
            # G·ªçi n·ªôi b·ªô h√†m decision
            decision_result = make_decision(new_device_state)
        
        # K·∫øt h·ª£p k·∫øt qu·∫£
        response_data = {
            "step_number": simulation_engine.simulation_step,
            "simulation": {
                "device_position": new_device_state.position,
                "current_task": new_device_state.current_task.value,
                "available_networks_count": len(new_device_state.available_networks),
                "networks": [net.name for net in new_device_state.available_networks]
            },
            "decision": decision_result,
            "integrated_result": {
                "success": decision_result is not None,
                "message": "Network selected successfully" if decision_result else "No networks available"
            }
        }
        
        return response_data
        
    except Exception as e:
        raise HTTPException(
            status_code=500,
            detail=f"Integrated simulation failed: {str(e)}"
        )


@app.post("/simulation/reset")  
def reset_simulation(x: int = 0, y: int = 0) -> Dict:
    """
    Reset simulation v·ªÅ v·ªã tr√≠ m·ªõi.
    
    Args:
        x: T·ªça ƒë·ªô x m·ªõi (default: 0)
        y: T·ªça ƒë·ªô y m·ªõi (default: 0)
        
    Returns:
        Dict v·ªõi tr·∫°ng th√°i sau khi reset
    """
    try:
        new_position = (x, y)
        simulation_engine.reset_simulation(new_position)
        
        return {
            "message": f"Simulation reset successfully",
            "new_position": new_position,
            "system_status": simulation_engine.get_simulation_stats()
        }
        
    except Exception as e:
        raise HTTPException(
            status_code=500,
            detail=f"Reset simulation failed: {str(e)}"
        )


@app.get("/simulation/current-state")
def get_current_simulation_state() -> Dict:
    """
    L·∫•y tr·∫°ng th√°i hi·ªán t·∫°i c·ªßa simulation m√† kh√¥ng ch·∫°y step m·ªõi.
    
    Returns:
        Dict v·ªõi tr·∫°ng th√°i hi·ªán t·∫°i
    """
    try:
        current_state = simulation_engine.device_state
        stats = simulation_engine.get_simulation_stats()
        
        return {
            "current_device_state": {
                "position": current_state.position,
                "current_task": current_state.current_task.value,
                "available_networks": [
                    {
                        "name": net.name,
                        "bandwidth": net.bandwidth,
                        "latency": net.latency,
                        "is_available": net.is_available
                    }
                    for net in current_state.available_networks
                ]
            },
            "simulation_stats": stats
        }
        
    except Exception as e:
        raise HTTPException(
            status_code=500,
            detail=f"Failed to get current state: {str(e)}"
        )


# Health check endpoint
@app.get("/health")
def health_check():
    """Simple health check"""
    return {
        "status": "healthy",
        "service": "IoT Network Selection API",
        "version": "1.0.0"
    }